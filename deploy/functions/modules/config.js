/** 
* Copyright 2019 Google LLC
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     https://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License. 
**/

const config = {};

// CUSTOMIZE THESE VALUES TO YOUR PROJECT
// You can put multiple projects here, for example to switch between prod
// and dev environments.
// npm run setup can replace these automatically
config.projects = [
	{
		// Name for you to remember what this is
		NAME: 'prod',
		// ID of the project in Google Cloud Platform
		GCP_ID: '$PROJECTID',
		// Location of the service key downloaded from GCP
		SERVICE_KEY: '$AUTHKEY',
		// URL of the canvas frontend. Must be HTTPS.
		CANVAS_URL: 'https://$PROJECTID.firebaseapp.com/canvas/',
		// URL of any audio files to be played. Must be HTTPS.
		AUDIO_URL: 'https://$PROJECTID.firebaseapp.com/audio/',
		// URL of any images to be shown. Must be HTTPS.
		IMAGE_URL: 'https://$PROJECTID.firebaseapp.com/images/',
		// ID of the Google Spreadsheet containing the quiz content
		SHEET_ID: '$SHEETID'
	}/*,
	{
		NAME : 'dev',
		GCP_ID : 'civicstest-dev',
		SERVICE_KEY : '/auth/civicstest-dev-0c1f35cb806e.json',
		CANVAS_URL : 'https://civicstest-dev.firebaseapp.com/canvas/',
		AUDIO_URL : 'https://civicstest-dev.firebaseapp.com/audio/',
		IMAGE_URL : 'https://civicstest-dev.firebaseapp.com/images/',
		SHEET_ID : '1nz4L1QyPex7vNrhCRJ1RATjBHrztD_BuD5-AluUl9aU'
	}*/
]

// Number of questions to ask per round
config.NUM_QUESTIONS = 3;

// Number of questions to pass a round
config.NUM_TO_PASS = 2;

// Number of questions to get right to hit different levels of feedback]
// Like "Good job!" versus "Perfect!" versus "Need more work..."
// The "reply" param matches up to a reply in the spreadsheet
config.FEEDBACK_THRESHOLDS = [
	{ score: 5, reply: 'bad' },
	{ score: 6, reply: 'okay' },
	{ score: 9, reply: 'good' },
	{ score: 10, reply: 'perfect' }
];

// Controls how questions are ordered in each round of the quiz
config.ORDERING = {
	// Randomize the questions
	RANDOMIZE_ORDER: true,
	// Prioritize questions the user hasn't seen
	PRIORITIZE_UNSEEN: true,
	// Prioritize questions the user got wrong (after unseeen)
	PRIORITIZE_WRONG: true,
	// Only use the selected questions specified below
	USE_SELECTED_QUESTIONS: false,
	// If USE_SELECTED_QUESTION is true, only these questions will be shown.
	SELECTED_QUESTIONS: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
}

// Allow users to retry a question if they got it wrong
config.ALLOW_RETRY = true;

// Maximum number of spoken replies the Assistant will allow.
// Additional replies are concatenated.
config.MAX_SPOKEN_REPLIES = 2;

// Maximum time to use welcome back text in the intro
// In seconds
// Currently 15 days.
config.WELCOME_BACK_MAX_TIME = 60 * 60 * 24 * 15;

// These are also the speech replies generated by clicking one of the
// buttons on the homescreen in canvas.
config.quizTypes = {
	MC: 'Easy',
	FREE: 'Hard'
};

// Makes sure to use the current project selected by Firebase or gcloud
// command line tools.
config.updateEnvironment = function () {
	let matchedProjet = false;
	for (const project of config.projects) {
		if (project.GCP_ID === process.env.GCLOUD_PROJECT) {
			for (const [key, value] of Object.entries(project)) {
				config[key] = value;
			}
			matchedProjet = true;
			break;
		}
	}
	if (!matchedProjet) {
		console.error("No project config found for " + 
			process.env.GCLOUD_PROJECT);
	}
};

// Dialogflow contexts
config.contexts = {
	ASKED_QUESTION: 'asked_question',
	ANSWERED_WRONG: 'answered_wrong',
	WAS_ASKED_TO_RETRY: 'was_asked_to_retry',
	WAS_ASKED_TO_CONTINUE: 'was_asked_to_continue',
	WAS_ASKED_TO_START_OVER: 'was_asked_to_start_over',
	ANSWERED_CORRECT: 'answered_correct',
	RETRYING: 'retrying',
	WAS_ASKED_QUIZ_TYPE: 'was_asked_quiz_type',
	QUIZ_ENDED: 'quiz_ended',
	WAS_ASKED_TO_SEE_SCORE: 'was_asked_to_see_score',
	ABOUT_SCREEN: 'about_screen'
};

config.dialogflow = {
	// Name of the entity containing answers in Dialogflow.
	ENTITY_DISPLAY_NAME: 'answer'
};

// If the project should use Interactive Canvas if available
config.USE_CANVAS = true;

// Screentypes passed to the frontend
config.canvasScreenTypes = {
	WELCOME: 'welcome',
	FALLBACK: 'fallback',
	RESULTS: 'results',
	ABOUT: 'about',
	ABOUT_CLOSE: 'about_close'
};


/**
 * Method determines how frequently to pull from Sheets and update Dialoglow
 * Choices are "live", "cache", or "static"
 * "live" will get new data from Sheets and update Dialogflow on _every_ 
 * invocation. Ideal for development when data is changing quickly.
 * "cache" will store data in memory for as long as the function stays alive.
 * "static" will just read data from a json.
 * If UPDATE_ON_DEPLOY is true, running "npm run deploy" will update the json
 * file and also update Dialogflow in addition to deploying the function.
 */
config.dataManager = {
	METHOD: "static",
	STATIC_FILENAME: 'staticquiz.json',
	UPDATE_ON_DEPLOY: true
};

config.spreadsheet = {
	AUTH_SCOPE: 'https://www.googleapis.com/auth/spreadsheets.readonly',
	// Character that splits multiple answers
	DELIMITER: '|',
	API_VERSION: 'v4',
	RANGE_START: 'A1',
	// Make sure this includes all of your data.
	RANGE_END: 'H300',

	sheets: [
		{
			id: 'questions', // variable name to be used in quizData
			name: 'Questions', // name of the sheet in the spreadsheet
			startAtRow: 2,
			columns: [
				{
					name: 'question',
					range: 1, // Column number
					required: true // If column must exist. Otherwise will fail.
				},
				{
					name: 'mustHave',
					range: 2
				},
				{
					name: 'answers',
					range: 3,
					array: true,
					required: true
				},
				{
					name: 'wrongAnswers',
					range: 4,
					array: true
				}
			]
		},
		{
			id: 'answers',
			name: 'Answers',
			startAtRow: 2,
			columns: [
				{
					name: 'value',
					range: 1,
					required: true
				},
				{
					name: 'shortDescription',
					range: 2
				},
				{
					name: 'image',
					range: 3
				},
				{
					name: 'image_alt',
					range: 4
				},
				{
					name: 'learnMore',
					range: 5
				},
				{
					name: 'synonyms',
					range: 6,
					array: true
				}
			]
		},
		{
			id: 'misc',
			name: [
				'Welcome',
				'QuestionFeedback',
				'QuizEnd',
				'Other'
			],
			startAtRow: 2,
			columns: [
				{
					name: 'id',
					range: 1
				},
				{
					name: 'text',
					range: 2,
					array: true
				},
				{
					name: 'audio',
					range: 3,
					array: true
				}
			]
		}
	]
};

// These are used by Replier to adjust content appropriately for
// Screen, audio, canvas, etc.
config.replyTypes = {
	ANSWER_CHOICES: 'answer_choices',
	EXTRA_INFO: 'extra_info',
	SPOKEN: 'spoken'
};

config.updateEnvironment();

module.exports = config;
